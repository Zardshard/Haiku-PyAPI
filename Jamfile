# Example usage:
# jam -j$(nproc) - build using all cpu cores
# jam clean - remove all build files
#
# Documentation for jam can be found at /boot/system/documentation/packages/jam
# * Jamfile.html provides a good reference for those writing Jamfiles.
# * Jambase.html documents the built-in rules.
# * Jam.html documents syntax and the jam command usage.

## Utility rules
# Maybe these should be built-in to Jambase.

# To create a shared library from some object files...
rule SharedLibraryFromObjects
{
	# Compile as if creating an executable
	MainFromObjects $(<) : $(>) ;
	# But build with the -shared flag when linking
	LINKFLAGS on $(<) = [ on $(<) return $(LINKFLAGS) ] -shared ;
}

# To create a shared library from some code files...
rule SharedLibrary
{
	# Compile the input files into .o files
	Objects $(>) ;
	# Then turn those .o files into a single .so file
	SharedLibraryFromObjects $(<) : $(>:S=$(SUFOBJ)) ;
	# Remove .o file after .so is made
	# NOTE: commenting this line out allows rebuilds to skip compiling .cpp
	# files that haven't been changed.
	# RmTemps $(<) : $(>:S=$(SUFOBJ)) ;
}

# To create a soft link, run the following command in the terminal.
# This replaces the built-in SoftLink action.
actions SoftLink
{
	$(RM) $(<) && $(LN) -sr $(>) $(<)
}

# Create multiple symlinks to a single file
rule Symlink
{
	for targetFile in $(<) {
		# Put target file into LOCATE_TARGET directory
		MakeLocate $(targetFile) : $(LOCATE_TARGET) ;

		SoftLink $(targetFile) : $(>) ;
	}
}

## Main build file

py = 3.10 ;

# Where to search for .cpp files
SEARCH_SOURCE += bindings/interface bindings/app ;

# Where to look for header files
# TODO: hardcoded python version
SubDirHdrs /system/lib/python$(py)/vendor-packages/pybind11/include/ ;
SubDirHdrs /system/develop/headers/python$(py)/ ;

# Additional C++ flags to use when compiling
SubDirC++Flags -std=c++14 -pipe -fPIC ;

# Flags to use when linking
LINKLIBS = -lbe ;

# Where to put the generated build files
LOCATE_TARGET = bin/x86_64 ; # TODO: hardcoded arch

# The source files that we want to compile:
local sourceFiles =
	# AppKit
	AppDefs.cpp
	Application.cpp
	Clipboard.cpp
	Cursor.cpp
	Handler.cpp
	Invoker.cpp
	Key.cpp
	KeyStore.cpp
	Looper.cpp
	Message.cpp
	MessageFilter.cpp
	MessageQueue.cpp
	MessageRunner.cpp
	Messenger.cpp
	Notification.cpp
	PropertyInfo.cpp
	Roster.cpp

	# InterfaceKit
	InterfaceDefs.cpp
	Alert.cpp
	Button.cpp
	Control.cpp
	Rect.cpp
	StringView.cpp
	TextControl.cpp
	View.cpp
	Window.cpp
	Font.cpp ;

# The shared library Be.so can be built from the sourceFiles
SharedLibrary Be.so : $(sourceFiles) ;

# The symlinked libraries can be built by linking to Be.so
Symlink $(sourceFiles:S=.so) : Be.so ;

# As part of `jam install`, copy the following files:
InstallLib /boot/system/non-packaged/lib/python$(py)/site-packages/Be
	: $(sourceFiles:S=.so) Be.so ;
